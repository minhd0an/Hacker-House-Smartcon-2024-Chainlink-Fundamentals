{
	"id": "16a02ec603e518dc6240c95ef03044b4",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.19",
	"solcLongVersion": "0.8.19+commit.7dd6d404",
	"input": {
		"language": "Solidity",
		"sources": {
			"CustomLogic.sol": {
				"content": "// SPDX-License-Identifier: MIT  \npragma solidity 0.8.19;\n\nimport {AutomationCompatibleInterface} from \"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\";\n\ncontract CustomLogic is AutomationCompatibleInterface {\n\n    uint256 public counter;  \n    uint256 public immutable interval;  \n    uint256 public lastTimeStamp;\n\n    constructor(uint256 updateInterval) {  \n        interval = updateInterval;  \n        lastTimeStamp = block.timestamp;\n\n        counter = 0;  \n    }\n\n    function checkUpkeep(  \n        bytes calldata /* checkData */  \n    )  \n        external  \n        view  \n        override  \n        returns (bool upkeepNeeded, bytes memory)  \n    {  \n        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;  \n    }\n\n    function performUpkeep(bytes calldata) external override {  \n        if ((block.timestamp - lastTimeStamp) > interval) {  \n            lastTimeStamp = block.timestamp;  \n            counter = counter + 1;  \n        }  \n    }  \n}"
			},
			"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {AutomationBase} from \"./AutomationBase.sol\";\nimport {AutomationCompatibleInterface} from \"./interfaces/AutomationCompatibleInterface.sol\";\n\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\n"
			},
			"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
			},
			"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract AutomationBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function _preventExecution() internal view {\n    // solhint-disable-next-line avoid-tx-origin\n    if (tx.origin != address(0) && tx.origin != address(0x1111111111111111111111111111111111111111)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    _preventExecution();\n    _;\n  }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": [],
			"evmVersion": "byzantium"
		}
	},
	"output": {
		"contracts": {
			"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol": {
				"AutomationBase": {
					"abi": [
						{
							"inputs": [],
							"name": "OnlySimulatedBackend",
							"type": "error"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":57:691  contract AutomationBase {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":57:691  contract AutomationBase {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220ef19df2cf45bbe6b9fb1825b514579bf6674f8793cc824ce1112e3dcb758a12764736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220ef19df2cf45bbe6b9fb1825b514579bf6674f8793cc824ce1112e3dcb758a12764736f6c63430008130033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEF NOT 0xDF 0x2C DELEGATECALL JUMPDEST 0xBE PUSH12 0x9FB1825B514579BF6674F879 EXTCODECOPY 0xC8 0x24 0xCE GT SLT 0xE3 0xDC 0xB7 PC LOG1 0x27 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ",
							"sourceMap": "57:634:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600080fdfea2646970667358221220ef19df2cf45bbe6b9fb1825b514579bf6674f8793cc824ce1112e3dcb758a12764736f6c63430008130033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEF NOT 0xDF 0x2C DELEGATECALL JUMPDEST 0xBE PUSH12 0x9FB1825B514579BF6674F879 EXTCODECOPY 0xC8 0x24 0xCE GT SLT 0xE3 0xDC 0xB7 PC LOG1 0x27 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ",
							"sourceMap": "57:634:0:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12600",
								"executionCost": "66",
								"totalCost": "12666"
							},
							"internal": {
								"_preventExecution()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 57,
									"end": 691,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 57,
									"end": 691,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 57,
									"end": 691,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 57,
									"end": 691,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 57,
									"end": 691,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 57,
									"end": 691,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 57,
									"end": 691,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 57,
									"end": 691,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 57,
									"end": 691,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 57,
									"end": 691,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 57,
									"end": 691,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 57,
									"end": 691,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 57,
									"end": 691,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 57,
									"end": 691,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 57,
									"end": 691,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 57,
									"end": 691,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 57,
									"end": 691,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 57,
									"end": 691,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 57,
									"end": 691,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 57,
									"end": 691,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 57,
									"end": 691,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ef19df2cf45bbe6b9fb1825b514579bf6674f8793cc824ce1112e3dcb758a12764736f6c63430008130033",
									".code": [
										{
											"begin": 57,
											"end": 691,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 57,
											"end": 691,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 57,
											"end": 691,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 57,
											"end": 691,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 57,
											"end": 691,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 57,
											"end": 691,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol",
								"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol",
								"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol",
								"CustomLogic.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":\"AutomationBase\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"keccak256\":\"0x8c97744adc25cf30d1a2509bff6c0ddc9b36feb75f8e38c85d5c62b8ec773159\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c53c8736dacbf8c517c63937d556c3e4873a62f509c5d84b89e32fc5c9c6c2c\",\"dweb:/ipfs/QmeR6RSce5dTDcPgbwBnG7E8U89716bqsUcv1NeWnX5RJf\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol": {
				"AutomationCompatible": {
					"abi": [
						{
							"inputs": [],
							"name": "OnlySimulatedBackend",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "checkData",
									"type": "bytes"
								}
							],
							"name": "checkUpkeep",
							"outputs": [
								{
									"internalType": "bool",
									"name": "upkeepNeeded",
									"type": "bool"
								},
								{
									"internalType": "bytes",
									"name": "performData",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "performData",
									"type": "bytes"
								}
							],
							"name": "performUpkeep",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"checkUpkeep(bytes)": {
								"details": "To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.",
								"params": {
									"checkData": "specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract."
								},
								"returns": {
									"performData": "bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.",
									"upkeepNeeded": "boolean to indicate whether the keeper should call performUpkeep or not."
								}
							},
							"performUpkeep(bytes)": {
								"details": "The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.",
								"params": {
									"performData": "is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"checkUpkeep(bytes)": "6e04ff0d",
							"performUpkeep(bytes)": "4585e33b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":\"AutomationCompatible\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"keccak256\":\"0x8c97744adc25cf30d1a2509bff6c0ddc9b36feb75f8e38c85d5c62b8ec773159\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c53c8736dacbf8c517c63937d556c3e4873a62f509c5d84b89e32fc5c9c6c2c\",\"dweb:/ipfs/QmeR6RSce5dTDcPgbwBnG7E8U89716bqsUcv1NeWnX5RJf\"]},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"keccak256\":\"0xce623f3e7fa4addf240032d2817b2b489ac08e79fae14a5cc5850ed3f1acddf8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0546b2739f3989b897c5cb591d01211e2db22e1a8578f68117f1a8a692abd85c\",\"dweb:/ipfs/QmW6guw8uUk2Dq49PWdjeZeEvnDDRg3CVX2BVcVNcT6QNL\"]},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"keccak256\":\"0xf504b227c442cd4ed31b336b7bd15cfcb23220c84c26e750975c7e7d959125aa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://34e35eb46dfadf12396e92dd970547209dfd99f0ae5b1ec7b5a3e81617f620a1\",\"dweb:/ipfs/Qmanoi2CDi9MwkP44HosagvewfMEvCMN1YthGRmCexVjwY\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"checkUpkeep(bytes)": {
								"notice": "method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas."
							},
							"performUpkeep(bytes)": {
								"notice": "method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."
							}
						},
						"version": 1
					}
				}
			},
			"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol": {
				"AutomationCompatibleInterface": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "checkData",
									"type": "bytes"
								}
							],
							"name": "checkUpkeep",
							"outputs": [
								{
									"internalType": "bool",
									"name": "upkeepNeeded",
									"type": "bool"
								},
								{
									"internalType": "bytes",
									"name": "performData",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "performData",
									"type": "bytes"
								}
							],
							"name": "performUpkeep",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"checkUpkeep(bytes)": {
								"details": "To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.",
								"params": {
									"checkData": "specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract."
								},
								"returns": {
									"performData": "bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.",
									"upkeepNeeded": "boolean to indicate whether the keeper should call performUpkeep or not."
								}
							},
							"performUpkeep(bytes)": {
								"details": "The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.",
								"params": {
									"performData": "is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"checkUpkeep(bytes)": "6e04ff0d",
							"performUpkeep(bytes)": "4585e33b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":\"AutomationCompatibleInterface\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"keccak256\":\"0xf504b227c442cd4ed31b336b7bd15cfcb23220c84c26e750975c7e7d959125aa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://34e35eb46dfadf12396e92dd970547209dfd99f0ae5b1ec7b5a3e81617f620a1\",\"dweb:/ipfs/Qmanoi2CDi9MwkP44HosagvewfMEvCMN1YthGRmCexVjwY\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"checkUpkeep(bytes)": {
								"notice": "method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas."
							},
							"performUpkeep(bytes)": {
								"notice": "method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."
							}
						},
						"version": 1
					}
				}
			},
			"CustomLogic.sol": {
				"CustomLogic": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "updateInterval",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"name": "checkUpkeep",
							"outputs": [
								{
									"internalType": "bool",
									"name": "upkeepNeeded",
									"type": "bool"
								},
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "counter",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "interval",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "lastTimeStamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"name": "performUpkeep",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"CustomLogic.sol\":173:989  contract CustomLogic is AutomationCompatibleInterface {... */\n  mstore(0x40, 0xa0)\n    /* \"CustomLogic.sol\":340:487  constructor(uint256 updateInterval) {  ... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"CustomLogic.sol\":388:413  interval = updateInterval */\n  0x80\n  mstore\n    /* \"CustomLogic.sol\":441:456  block.timestamp */\n  timestamp\n    /* \"CustomLogic.sol\":425:438  lastTimeStamp */\n  0x01\n    /* \"CustomLogic.sol\":425:456  lastTimeStamp = block.timestamp */\n  sstore\n    /* \"CustomLogic.sol\":477:478  0 */\n  0x00\n    /* \"CustomLogic.sol\":467:478  counter = 0 */\n  dup1\n  sstore\n    /* \"CustomLogic.sol\":173:989  contract CustomLogic is AutomationCompatibleInterface {... */\n  jump(tag_7)\n    /* \"#utility.yul\":14:198   */\ntag_3:\n    /* \"#utility.yul\":84:90   */\n  0x00\n    /* \"#utility.yul\":137:139   */\n  0x20\n    /* \"#utility.yul\":125:134   */\n  dup3\n    /* \"#utility.yul\":116:123   */\n  dup5\n    /* \"#utility.yul\":112:135   */\n  sub\n    /* \"#utility.yul\":108:140   */\n  slt\n    /* \"#utility.yul\":105:157   */\n  iszero\n  tag_9\n  jumpi\n    /* \"#utility.yul\":153:154   */\n  0x00\n    /* \"#utility.yul\":150:151   */\n  dup1\n    /* \"#utility.yul\":143:155   */\n  revert\n    /* \"#utility.yul\":105:157   */\ntag_9:\n  pop\n    /* \"#utility.yul\":176:192   */\n  mload\n  swap2\n    /* \"#utility.yul\":14:198   */\n  swap1\n  pop\n  jump\t// out\ntag_7:\n    /* \"CustomLogic.sol\":173:989  contract CustomLogic is AutomationCompatibleInterface {... */\n  mload(0x80)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0x7fe86492ed9171487feeb17b76d71244c5fb104d897816bb03a924e5871f3fa3\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"CustomLogic.sol\":173:989  contract CustomLogic is AutomationCompatibleInterface {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      div(calldataload(0x00), 0x0100000000000000000000000000000000000000000000000000000000)\n      0x3f3b3b27\n      dup2\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x4585e33b\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x61bc221a\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x6e04ff0d\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x947a36fb\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"CustomLogic.sol\":305:333  uint256 public lastTimeStamp */\n    tag_3:\n      tag_8\n      sload(0x01)\n      dup2\n      jump\n    tag_8:\n      mload(0x40)\n        /* \"#utility.yul\":160:185   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":148:150   */\n      0x20\n        /* \"#utility.yul\":133:151   */\n      add\n        /* \"CustomLogic.sol\":305:333  uint256 public lastTimeStamp */\n    tag_10:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"CustomLogic.sol\":761:985  function performUpkeep(bytes calldata) external override {  ... */\n    tag_4:\n      tag_12\n      tag_13\n      calldatasize\n      0x04\n      tag_14\n      jump\t// in\n    tag_13:\n      tag_15\n      jump\t// in\n    tag_12:\n      stop\n        /* \"CustomLogic.sol\":234:256  uint256 public counter */\n    tag_5:\n      tag_8\n      sload(0x00)\n      dup2\n      jump\n        /* \"CustomLogic.sol\":493:755  function checkUpkeep(  ... */\n    tag_6:\n      tag_19\n      tag_20\n      calldatasize\n      0x04\n      tag_14\n      jump\t// in\n    tag_20:\n      tag_21\n      jump\t// in\n    tag_19:\n      mload(0x40)\n      tag_10\n      swap3\n      swap2\n      swap1\n      tag_23\n      jump\t// in\n        /* \"CustomLogic.sol\":264:297  uint256 public immutable interval */\n    tag_7:\n      tag_8\n      immutable(\"0x7fe86492ed9171487feeb17b76d71244c5fb104d897816bb03a924e5871f3fa3\")\n      dup2\n      jump\n        /* \"CustomLogic.sol\":761:985  function performUpkeep(bytes calldata) external override {  ... */\n    tag_15:\n        /* \"CustomLogic.sol\":870:878  interval */\n      immutable(\"0x7fe86492ed9171487feeb17b76d71244c5fb104d897816bb03a924e5871f3fa3\")\n        /* \"CustomLogic.sol\":853:866  lastTimeStamp */\n      sload(0x01)\n        /* \"CustomLogic.sol\":835:850  block.timestamp */\n      timestamp\n        /* \"CustomLogic.sol\":835:866  block.timestamp - lastTimeStamp */\n      tag_28\n      swap2\n      swap1\n      tag_29\n      jump\t// in\n    tag_28:\n        /* \"CustomLogic.sol\":834:878  (block.timestamp - lastTimeStamp) > interval */\n      gt\n        /* \"CustomLogic.sol\":830:977  if ((block.timestamp - lastTimeStamp) > interval) {  ... */\n      iszero\n      tag_30\n      jumpi\n        /* \"CustomLogic.sol\":912:927  block.timestamp */\n      timestamp\n        /* \"CustomLogic.sol\":896:909  lastTimeStamp */\n      0x01\n        /* \"CustomLogic.sol\":896:927  lastTimeStamp = block.timestamp */\n      swap1\n      dup2\n      sstore\n        /* \"CustomLogic.sol\":953:960  counter */\n      sload(0x00)\n        /* \"CustomLogic.sol\":953:964  counter + 1 */\n      tag_31\n      swap2\n      tag_32\n      jump\t// in\n    tag_31:\n        /* \"CustomLogic.sol\":943:950  counter */\n      0x00\n        /* \"CustomLogic.sol\":943:964  counter = counter + 1 */\n      sstore\n        /* \"CustomLogic.sol\":830:977  if ((block.timestamp - lastTimeStamp) > interval) {  ... */\n    tag_30:\n        /* \"CustomLogic.sol\":761:985  function performUpkeep(bytes calldata) external override {  ... */\n      pop\n      pop\n      jump\t// out\n        /* \"CustomLogic.sol\":493:755  function checkUpkeep(  ... */\n    tag_21:\n        /* \"CustomLogic.sol\":636:653  bool upkeepNeeded */\n      0x00\n        /* \"CustomLogic.sol\":655:667  bytes memory */\n      0x60\n        /* \"CustomLogic.sol\":738:746  interval */\n      immutable(\"0x7fe86492ed9171487feeb17b76d71244c5fb104d897816bb03a924e5871f3fa3\")\n        /* \"CustomLogic.sol\":721:734  lastTimeStamp */\n      sload(0x01)\n        /* \"CustomLogic.sol\":703:718  block.timestamp */\n      timestamp\n        /* \"CustomLogic.sol\":703:734  block.timestamp - lastTimeStamp */\n      tag_34\n      swap2\n      swap1\n      tag_29\n      jump\t// in\n    tag_34:\n        /* \"CustomLogic.sol\":702:746  (block.timestamp - lastTimeStamp) > interval */\n      gt\n        /* \"CustomLogic.sol\":687:746  upkeepNeeded = (block.timestamp - lastTimeStamp) > interval */\n      swap2\n      pop\n        /* \"CustomLogic.sol\":493:755  function checkUpkeep(  ... */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":196:787   */\n    tag_14:\n        /* \"#utility.yul\":266:272   */\n      0x00\n        /* \"#utility.yul\":274:280   */\n      dup1\n        /* \"#utility.yul\":327:329   */\n      0x20\n        /* \"#utility.yul\":315:324   */\n      dup4\n        /* \"#utility.yul\":306:313   */\n      dup6\n        /* \"#utility.yul\":302:325   */\n      sub\n        /* \"#utility.yul\":298:330   */\n      slt\n        /* \"#utility.yul\":295:347   */\n      iszero\n      tag_39\n      jumpi\n        /* \"#utility.yul\":343:344   */\n      0x00\n        /* \"#utility.yul\":340:341   */\n      dup1\n        /* \"#utility.yul\":333:345   */\n      revert\n        /* \"#utility.yul\":295:347   */\n    tag_39:\n        /* \"#utility.yul\":383:392   */\n      dup3\n        /* \"#utility.yul\":370:393   */\n      calldataload\n        /* \"#utility.yul\":412:430   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":453:455   */\n      dup1\n        /* \"#utility.yul\":445:451   */\n      dup3\n        /* \"#utility.yul\":442:456   */\n      gt\n        /* \"#utility.yul\":439:473   */\n      iszero\n      tag_40\n      jumpi\n        /* \"#utility.yul\":469:470   */\n      0x00\n        /* \"#utility.yul\":466:467   */\n      dup1\n        /* \"#utility.yul\":459:471   */\n      revert\n        /* \"#utility.yul\":439:473   */\n    tag_40:\n        /* \"#utility.yul\":507:513   */\n      dup2\n        /* \"#utility.yul\":496:505   */\n      dup6\n        /* \"#utility.yul\":492:514   */\n      add\n        /* \"#utility.yul\":482:514   */\n      swap2\n      pop\n        /* \"#utility.yul\":552:559   */\n      dup6\n        /* \"#utility.yul\":545:549   */\n      0x1f\n        /* \"#utility.yul\":541:543   */\n      dup4\n        /* \"#utility.yul\":537:550   */\n      add\n        /* \"#utility.yul\":533:560   */\n      slt\n        /* \"#utility.yul\":523:578   */\n      tag_41\n      jumpi\n        /* \"#utility.yul\":574:575   */\n      0x00\n        /* \"#utility.yul\":571:572   */\n      dup1\n        /* \"#utility.yul\":564:576   */\n      revert\n        /* \"#utility.yul\":523:578   */\n    tag_41:\n        /* \"#utility.yul\":614:616   */\n      dup2\n        /* \"#utility.yul\":601:617   */\n      calldataload\n        /* \"#utility.yul\":640:642   */\n      dup2\n        /* \"#utility.yul\":632:638   */\n      dup2\n        /* \"#utility.yul\":629:643   */\n      gt\n        /* \"#utility.yul\":626:660   */\n      iszero\n      tag_42\n      jumpi\n        /* \"#utility.yul\":656:657   */\n      0x00\n        /* \"#utility.yul\":653:654   */\n      dup1\n        /* \"#utility.yul\":646:658   */\n      revert\n        /* \"#utility.yul\":626:660   */\n    tag_42:\n        /* \"#utility.yul\":701:708   */\n      dup7\n        /* \"#utility.yul\":696:698   */\n      0x20\n        /* \"#utility.yul\":687:693   */\n      dup3\n        /* \"#utility.yul\":683:685   */\n      dup6\n        /* \"#utility.yul\":679:694   */\n      add\n        /* \"#utility.yul\":675:699   */\n      add\n        /* \"#utility.yul\":672:709   */\n      gt\n        /* \"#utility.yul\":669:726   */\n      iszero\n      tag_43\n      jumpi\n        /* \"#utility.yul\":722:723   */\n      0x00\n        /* \"#utility.yul\":719:720   */\n      dup1\n        /* \"#utility.yul\":712:724   */\n      revert\n        /* \"#utility.yul\":669:726   */\n    tag_43:\n        /* \"#utility.yul\":753:755   */\n      0x20\n        /* \"#utility.yul\":745:756   */\n      swap3\n      swap1\n      swap3\n      add\n      swap7\n        /* \"#utility.yul\":775:781   */\n      swap2\n      swap6\n      pop\n        /* \"#utility.yul\":196:787   */\n      swap1\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":792:1419   */\n    tag_23:\n        /* \"#utility.yul\":975:981   */\n      dup3\n        /* \"#utility.yul\":968:982   */\n      iszero\n        /* \"#utility.yul\":961:983   */\n      iszero\n        /* \"#utility.yul\":950:959   */\n      dup2\n        /* \"#utility.yul\":943:984   */\n      mstore\n        /* \"#utility.yul\":924:928   */\n      0x00\n        /* \"#utility.yul\":1003:1005   */\n      0x20\n        /* \"#utility.yul\":1041:1043   */\n      0x40\n        /* \"#utility.yul\":1036:1038   */\n      dup2\n        /* \"#utility.yul\":1025:1034   */\n      dup5\n        /* \"#utility.yul\":1021:1039   */\n      add\n        /* \"#utility.yul\":1014:1044   */\n      mstore\n        /* \"#utility.yul\":1073:1079   */\n      dup4\n        /* \"#utility.yul\":1067:1080   */\n      mload\n        /* \"#utility.yul\":1116:1122   */\n      dup1\n        /* \"#utility.yul\":1111:1113   */\n      0x40\n        /* \"#utility.yul\":1100:1109   */\n      dup6\n        /* \"#utility.yul\":1096:1114   */\n      add\n        /* \"#utility.yul\":1089:1123   */\n      mstore\n        /* \"#utility.yul\":1141:1142   */\n      0x00\n        /* \"#utility.yul\":1151:1291   */\n    tag_45:\n        /* \"#utility.yul\":1165:1171   */\n      dup2\n        /* \"#utility.yul\":1162:1163   */\n      dup2\n        /* \"#utility.yul\":1159:1172   */\n      lt\n        /* \"#utility.yul\":1151:1291   */\n      iszero\n      tag_47\n      jumpi\n        /* \"#utility.yul\":1260:1274   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":1256:1279   */\n      dup4\n      add\n        /* \"#utility.yul\":1250:1280   */\n      mload\n        /* \"#utility.yul\":1226:1243   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":1245:1247   */\n      0x60\n        /* \"#utility.yul\":1222:1248   */\n      add\n        /* \"#utility.yul\":1215:1281   */\n      mstore\n        /* \"#utility.yul\":1180:1190   */\n      dup3\n      add\n        /* \"#utility.yul\":1151:1291   */\n      jump(tag_45)\n    tag_47:\n        /* \"#utility.yul\":1155:1158   */\n      pop\n        /* \"#utility.yul\":1340:1341   */\n      0x00\n        /* \"#utility.yul\":1335:1337   */\n      0x60\n        /* \"#utility.yul\":1326:1332   */\n      dup3\n        /* \"#utility.yul\":1315:1324   */\n      dup7\n        /* \"#utility.yul\":1311:1333   */\n      add\n        /* \"#utility.yul\":1307:1338   */\n      add\n        /* \"#utility.yul\":1300:1342   */\n      mstore\n        /* \"#utility.yul\":1410:1412   */\n      0x60\n        /* \"#utility.yul\":1403:1405   */\n      0x1f\n        /* \"#utility.yul\":1399:1406   */\n      not\n        /* \"#utility.yul\":1394:1396   */\n      0x1f\n        /* \"#utility.yul\":1386:1392   */\n      dup4\n        /* \"#utility.yul\":1382:1397   */\n      add\n        /* \"#utility.yul\":1378:1407   */\n      and\n        /* \"#utility.yul\":1367:1376   */\n      dup6\n        /* \"#utility.yul\":1363:1408   */\n      add\n        /* \"#utility.yul\":1359:1413   */\n      add\n        /* \"#utility.yul\":1351:1413   */\n      swap3\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":792:1419   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1424:1608   */\n    tag_35:\n        /* \"#utility.yul\":1476:1553   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":1473:1474   */\n      0x00\n        /* \"#utility.yul\":1466:1554   */\n      mstore\n        /* \"#utility.yul\":1573:1577   */\n      0x11\n        /* \"#utility.yul\":1570:1571   */\n      0x04\n        /* \"#utility.yul\":1563:1578   */\n      mstore\n        /* \"#utility.yul\":1597:1601   */\n      0x24\n        /* \"#utility.yul\":1594:1595   */\n      0x00\n        /* \"#utility.yul\":1587:1602   */\n      revert\n        /* \"#utility.yul\":1613:1741   */\n    tag_29:\n        /* \"#utility.yul\":1680:1689   */\n      dup2\n      dup2\n      sub\n        /* \"#utility.yul\":1701:1712   */\n      dup2\n      dup2\n      gt\n        /* \"#utility.yul\":1698:1735   */\n      iszero\n      tag_51\n      jumpi\n        /* \"#utility.yul\":1715:1733   */\n      tag_51\n      tag_35\n      jump\t// in\n    tag_51:\n        /* \"#utility.yul\":1613:1741   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1746:1871   */\n    tag_32:\n        /* \"#utility.yul\":1811:1820   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":1832:1842   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":1829:1865   */\n      iszero\n      tag_51\n      jumpi\n        /* \"#utility.yul\":1845:1863   */\n      tag_51\n      tag_35\n      jump\t// in\n\n    auxdata: 0xa2646970667358221220b2008c029273076c35ab03e283283efede07a375a59fe2b9c348113c8376396964736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_98": {
									"entryPoint": null,
									"id": 98,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 63,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:200:4",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:4",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "95:103:4",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "141:16:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "150:1:4",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "153:1:4",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "143:6:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "143:12:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "143:12:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "116:7:4"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "125:9:4"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "112:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "112:23:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "137:2:4",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "108:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "108:32:4"
															},
															"nodeType": "YulIf",
															"src": "105:52:4"
														},
														{
															"nodeType": "YulAssignment",
															"src": "166:26:4",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "182:9:4"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "176:5:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "176:16:4"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:4"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "61:9:4",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "72:7:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "84:6:4",
														"type": ""
													}
												],
												"src": "14:184:4"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n}",
									"id": 4,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60a060405234801561001057600080fd5b5060405161036038038061036083398101604081905261002f9161003f565b6080524260015560008055610058565b60006020828403121561005157600080fd5b5051919050565b6080516102e161007f6000396000818160d80152818160fc015261014f01526102e16000f3fe608060405234801561001057600080fd5b5060043610610073577c010000000000000000000000000000000000000000000000000000000060003504633f3b3b2781146100785780634585e33b1461009457806361bc221a146100a95780636e04ff0d146100b2578063947a36fb146100d3575b600080fd5b61008160015481565b6040519081526020015b60405180910390f35b6100a76100a2366004610186565b6100fa565b005b61008160005481565b6100c56100c0366004610186565b610149565b60405161008b9291906101f8565b6100817f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000060015442610129919061027f565b11156101455742600190815560005461014191610298565b6000555b5050565b600060607f00000000000000000000000000000000000000000000000000000000000000006001544261017c919061027f565b1191509250929050565b6000806020838503121561019957600080fd5b823567ffffffffffffffff808211156101b157600080fd5b818501915085601f8301126101c557600080fd5b8135818111156101d457600080fd5b8660208285010111156101e657600080fd5b60209290920196919550909350505050565b821515815260006020604081840152835180604085015260005b8181101561022e57858101830151858201606001528201610212565b506000606082860101526060601f19601f830116850101925050509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561029257610292610250565b92915050565b808201808211156102925761029261025056fea2646970667358221220b2008c029273076c35ab03e283283efede07a375a59fe2b9c348113c8376396964736f6c63430008130033",
							"opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x360 CODESIZE SUB DUP1 PUSH2 0x360 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x3F JUMP JUMPDEST PUSH1 0x80 MSTORE TIMESTAMP PUSH1 0x1 SSTORE PUSH1 0x0 DUP1 SSTORE PUSH2 0x58 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x2E1 PUSH2 0x7F PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH1 0xD8 ADD MSTORE DUP2 DUP2 PUSH1 0xFC ADD MSTORE PUSH2 0x14F ADD MSTORE PUSH2 0x2E1 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x73 JUMPI PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV PUSH4 0x3F3B3B27 DUP2 EQ PUSH2 0x78 JUMPI DUP1 PUSH4 0x4585E33B EQ PUSH2 0x94 JUMPI DUP1 PUSH4 0x61BC221A EQ PUSH2 0xA9 JUMPI DUP1 PUSH4 0x6E04FF0D EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0x947A36FB EQ PUSH2 0xD3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x81 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA7 PUSH2 0xA2 CALLDATASIZE PUSH1 0x4 PUSH2 0x186 JUMP JUMPDEST PUSH2 0xFA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x81 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xC5 PUSH2 0xC0 CALLDATASIZE PUSH1 0x4 PUSH2 0x186 JUMP JUMPDEST PUSH2 0x149 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8B SWAP3 SWAP2 SWAP1 PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x81 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 SLOAD TIMESTAMP PUSH2 0x129 SWAP2 SWAP1 PUSH2 0x27F JUMP JUMPDEST GT ISZERO PUSH2 0x145 JUMPI TIMESTAMP PUSH1 0x1 SWAP1 DUP2 SSTORE PUSH1 0x0 SLOAD PUSH2 0x141 SWAP2 PUSH2 0x298 JUMP JUMPDEST PUSH1 0x0 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH32 0x0 PUSH1 0x1 SLOAD TIMESTAMP PUSH2 0x17C SWAP2 SWAP1 PUSH2 0x27F JUMP JUMPDEST GT SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x199 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0x40 DUP2 DUP5 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x22E JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x60 ADD MSTORE DUP3 ADD PUSH2 0x212 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x60 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x60 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x292 JUMPI PUSH2 0x292 PUSH2 0x250 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x292 JUMPI PUSH2 0x292 PUSH2 0x250 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB2 STOP DUP13 MUL SWAP3 PUSH20 0x76C35AB03E283283EFEDE07A375A59FE2B9C348 GT EXTCODECOPY DUP4 PUSH23 0x396964736F6C6343000813003300000000000000000000 ",
							"sourceMap": "173:816:3:-:0;;;340:147;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;388:25;;441:15;425:13;:31;477:1;467:11;;173:816;;14:184:4;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;-1:-1:-1;176:16:4;;14:184;-1:-1:-1;14:184:4:o;:::-;173:816:3;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@checkUpkeep_119": {
									"entryPoint": 329,
									"id": 119,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"@counter_75": {
									"entryPoint": null,
									"id": 75,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@interval_77": {
									"entryPoint": null,
									"id": 77,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@lastTimeStamp_79": {
									"entryPoint": null,
									"id": 79,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@performUpkeep_146": {
									"entryPoint": 250,
									"id": 146,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_bytes_calldata_ptr": {
									"entryPoint": 390,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed": {
									"entryPoint": 504,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 664,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 639,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 592,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1873:4",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:4",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "115:76:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "125:26:4",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "137:9:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "148:2:4",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "133:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "133:18:4"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "125:4:4"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "167:9:4"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "178:6:4"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "160:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "160:25:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "160:25:4"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "84:9:4",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "95:6:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "106:4:4",
														"type": ""
													}
												],
												"src": "14:177:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "285:502:4",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "331:16:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "340:1:4",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "343:1:4",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "333:6:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "333:12:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "333:12:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "306:7:4"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "315:9:4"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "302:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "302:23:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "327:2:4",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "298:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "298:32:4"
															},
															"nodeType": "YulIf",
															"src": "295:52:4"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "356:37:4",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "383:9:4"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "370:12:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "370:23:4"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "360:6:4",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "402:28:4",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "412:18:4",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "406:2:4",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "457:16:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "466:1:4",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "469:1:4",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "459:6:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "459:12:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "459:12:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "445:6:4"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "453:2:4"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "442:2:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "442:14:4"
															},
															"nodeType": "YulIf",
															"src": "439:34:4"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "482:32:4",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "496:9:4"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "507:6:4"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "492:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "492:22:4"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "486:2:4",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "562:16:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "571:1:4",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "574:1:4",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "564:6:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "564:12:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "564:12:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "541:2:4"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "545:4:4",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "537:3:4"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "537:13:4"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "552:7:4"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "533:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "533:27:4"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "526:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "526:35:4"
															},
															"nodeType": "YulIf",
															"src": "523:55:4"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "587:30:4",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "614:2:4"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "601:12:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "601:16:4"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "591:6:4",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "644:16:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "653:1:4",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "656:1:4",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "646:6:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "646:12:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "646:12:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "632:6:4"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "640:2:4"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "629:2:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "629:14:4"
															},
															"nodeType": "YulIf",
															"src": "626:34:4"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "710:16:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "719:1:4",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "722:1:4",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "712:6:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "712:12:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "712:12:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "683:2:4"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "687:6:4"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "679:3:4"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "679:15:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "696:2:4",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "675:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "675:24:4"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "701:7:4"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "672:2:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "672:37:4"
															},
															"nodeType": "YulIf",
															"src": "669:57:4"
														},
														{
															"nodeType": "YulAssignment",
															"src": "735:21:4",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "749:2:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "753:2:4",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "745:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "745:11:4"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "735:6:4"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "765:16:4",
															"value": {
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "775:6:4"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "765:6:4"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "243:9:4",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "254:7:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "266:6:4",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "274:6:4",
														"type": ""
													}
												],
												"src": "196:591:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "933:486:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "950:9:4"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "975:6:4"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "968:6:4"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "968:14:4"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "961:6:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "961:22:4"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "943:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "943:41:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "943:41:4"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "993:12:4",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1003:2:4",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "997:2:4",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1025:9:4"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1036:2:4"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1021:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1021:18:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1041:2:4",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1014:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1014:30:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1014:30:4"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1053:27:4",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "1073:6:4"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1067:5:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1067:13:4"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "1057:6:4",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1100:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1111:2:4",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1096:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1096:18:4"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1116:6:4"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1089:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1089:34:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1089:34:4"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1132:10:4",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1141:1:4",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1136:1:4",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1201:90:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "1230:9:4"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "1241:1:4"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1226:3:4"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1226:17:4"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1245:2:4",
																							"type": "",
																							"value": "96"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1222:3:4"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1222:26:4"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value1",
																											"nodeType": "YulIdentifier",
																											"src": "1264:6:4"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "1272:1:4"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "1260:3:4"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "1260:14:4"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "1276:2:4"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1256:3:4"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1256:23:4"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1250:5:4"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1250:30:4"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1215:6:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1215:66:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1215:66:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1162:1:4"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1165:6:4"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1159:2:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1159:13:4"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1173:19:4",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1175:15:4",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1184:1:4"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "1187:2:4"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1180:3:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1180:10:4"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1175:1:4"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1155:3:4",
																"statements": []
															},
															"src": "1151:140:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1315:9:4"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "1326:6:4"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1311:3:4"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1311:22:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1335:2:4",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1307:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1307:31:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1340:1:4",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1300:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1300:42:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1300:42:4"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1351:62:4",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1367:9:4"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "1386:6:4"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1394:2:4",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "1382:3:4"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1382:15:4"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1403:2:4",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "1399:3:4"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1399:7:4"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1378:3:4"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1378:29:4"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1363:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1363:45:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1410:2:4",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1359:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1359:54:4"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1351:4:4"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "894:9:4",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "905:6:4",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "913:6:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "924:4:4",
														"type": ""
													}
												],
												"src": "792:627:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1456:152:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1473:1:4",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1476:77:4",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1466:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1466:88:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1466:88:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1570:1:4",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1573:4:4",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1563:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1563:15:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1563:15:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1594:1:4",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1597:4:4",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1587:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1587:15:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1587:15:4"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "1424:184:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1662:79:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1672:17:4",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "1684:1:4"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "1687:1:4"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1680:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1680:9:4"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "1672:4:4"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1713:22:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "1715:16:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1715:18:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1715:18:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nodeType": "YulIdentifier",
																		"src": "1704:4:4"
																	},
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "1710:1:4"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1701:2:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1701:11:4"
															},
															"nodeType": "YulIf",
															"src": "1698:37:4"
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "1644:1:4",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "1647:1:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "1653:4:4",
														"type": ""
													}
												],
												"src": "1613:128:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1794:77:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1804:16:4",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "1815:1:4"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "1818:1:4"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1811:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1811:9:4"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "1804:3:4"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1843:22:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "1845:16:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1845:18:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1845:18:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "1835:1:4"
																	},
																	{
																		"name": "sum",
																		"nodeType": "YulIdentifier",
																		"src": "1838:3:4"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1832:2:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1832:10:4"
															},
															"nodeType": "YulIf",
															"src": "1829:36:4"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "1777:1:4",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "1780:1:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "1786:3:4",
														"type": ""
													}
												],
												"src": "1746:125:4"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, iszero(iszero(value0)))\n        let _1 := 32\n        mstore(add(headStart, _1), 64)\n        let length := mload(value1)\n        mstore(add(headStart, 64), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 96), mload(add(add(value1, i), _1)))\n        }\n        mstore(add(add(headStart, length), 96), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n}",
									"id": 4,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"77": [
									{
										"length": 32,
										"start": 216
									},
									{
										"length": 32,
										"start": 252
									},
									{
										"length": 32,
										"start": 335
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5060043610610073577c010000000000000000000000000000000000000000000000000000000060003504633f3b3b2781146100785780634585e33b1461009457806361bc221a146100a95780636e04ff0d146100b2578063947a36fb146100d3575b600080fd5b61008160015481565b6040519081526020015b60405180910390f35b6100a76100a2366004610186565b6100fa565b005b61008160005481565b6100c56100c0366004610186565b610149565b60405161008b9291906101f8565b6100817f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000060015442610129919061027f565b11156101455742600190815560005461014191610298565b6000555b5050565b600060607f00000000000000000000000000000000000000000000000000000000000000006001544261017c919061027f565b1191509250929050565b6000806020838503121561019957600080fd5b823567ffffffffffffffff808211156101b157600080fd5b818501915085601f8301126101c557600080fd5b8135818111156101d457600080fd5b8660208285010111156101e657600080fd5b60209290920196919550909350505050565b821515815260006020604081840152835180604085015260005b8181101561022e57858101830151858201606001528201610212565b506000606082860101526060601f19601f830116850101925050509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561029257610292610250565b92915050565b808201808211156102925761029261025056fea2646970667358221220b2008c029273076c35ab03e283283efede07a375a59fe2b9c348113c8376396964736f6c63430008130033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x73 JUMPI PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV PUSH4 0x3F3B3B27 DUP2 EQ PUSH2 0x78 JUMPI DUP1 PUSH4 0x4585E33B EQ PUSH2 0x94 JUMPI DUP1 PUSH4 0x61BC221A EQ PUSH2 0xA9 JUMPI DUP1 PUSH4 0x6E04FF0D EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0x947A36FB EQ PUSH2 0xD3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x81 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA7 PUSH2 0xA2 CALLDATASIZE PUSH1 0x4 PUSH2 0x186 JUMP JUMPDEST PUSH2 0xFA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x81 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xC5 PUSH2 0xC0 CALLDATASIZE PUSH1 0x4 PUSH2 0x186 JUMP JUMPDEST PUSH2 0x149 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8B SWAP3 SWAP2 SWAP1 PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x81 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 SLOAD TIMESTAMP PUSH2 0x129 SWAP2 SWAP1 PUSH2 0x27F JUMP JUMPDEST GT ISZERO PUSH2 0x145 JUMPI TIMESTAMP PUSH1 0x1 SWAP1 DUP2 SSTORE PUSH1 0x0 SLOAD PUSH2 0x141 SWAP2 PUSH2 0x298 JUMP JUMPDEST PUSH1 0x0 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH32 0x0 PUSH1 0x1 SLOAD TIMESTAMP PUSH2 0x17C SWAP2 SWAP1 PUSH2 0x27F JUMP JUMPDEST GT SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x199 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0x40 DUP2 DUP5 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x22E JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x60 ADD MSTORE DUP3 ADD PUSH2 0x212 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x60 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x60 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x292 JUMPI PUSH2 0x292 PUSH2 0x250 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x292 JUMPI PUSH2 0x292 PUSH2 0x250 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB2 STOP DUP13 MUL SWAP3 PUSH20 0x76C35AB03E283283EFEDE07A375A59FE2B9C348 GT EXTCODECOPY DUP4 PUSH23 0x396964736F6C6343000813003300000000000000000000 ",
							"sourceMap": "173:816:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;305:28;;;;;;;;;160:25:4;;;148:2;133:18;305:28:3;;;;;;;;761:224;;;;;;:::i;:::-;;:::i;:::-;;234:22;;;;;;493:262;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;264:33::-;;;;;761:224;870:8;853:13;;835:15;:31;;;;:::i;:::-;834:44;830:147;;;912:15;896:13;:31;;;953:7;;:11;;;:::i;:::-;943:7;:21;830:147;761:224;;:::o;493:262::-;636:17;655:12;738:8;721:13;;703:15;:31;;;;:::i;:::-;702:44;687:59;;493:262;;;;;:::o;196:591:4:-;266:6;274;327:2;315:9;306:7;302:23;298:32;295:52;;;343:1;340;333:12;295:52;383:9;370:23;412:18;453:2;445:6;442:14;439:34;;;469:1;466;459:12;439:34;507:6;496:9;492:22;482:32;;552:7;545:4;541:2;537:13;533:27;523:55;;574:1;571;564:12;523:55;614:2;601:16;640:2;632:6;629:14;626:34;;;656:1;653;646:12;626:34;701:7;696:2;687:6;683:2;679:15;675:24;672:37;669:57;;;722:1;719;712:12;669:57;753:2;745:11;;;;;775:6;;-1:-1:-1;196:591:4;;-1:-1:-1;;;;196:591:4:o;792:627::-;975:6;968:14;961:22;950:9;943:41;924:4;1003:2;1041;1036;1025:9;1021:18;1014:30;1073:6;1067:13;1116:6;1111:2;1100:9;1096:18;1089:34;1141:1;1151:140;1165:6;1162:1;1159:13;1151:140;;;1260:14;;;1256:23;;1250:30;1226:17;;;1245:2;1222:26;1215:66;1180:10;;1151:140;;;1155:3;1340:1;1335:2;1326:6;1315:9;1311:22;1307:31;1300:42;1410:2;1403;1399:7;1394:2;1386:6;1382:15;1378:29;1367:9;1363:45;1359:54;1351:62;;;;792:627;;;;;:::o;1424:184::-;1476:77;1473:1;1466:88;1573:4;1570:1;1563:15;1597:4;1594:1;1587:15;1613:128;1680:9;;;1701:11;;;1698:37;;;1715:18;;:::i;:::-;1613:128;;;;:::o;1746:125::-;1811:9;;;1832:10;;;1829:36;;;1845:18;;:::i"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "147400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"checkUpkeep(bytes)": "infinite",
								"counter()": "408",
								"interval()": "infinite",
								"lastTimeStamp()": "364",
								"performUpkeep(bytes)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 173,
									"end": 989,
									"name": "PUSH",
									"source": 3,
									"value": "A0"
								},
								{
									"begin": 173,
									"end": 989,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 173,
									"end": 989,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 340,
									"end": 487,
									"name": "CALLVALUE",
									"source": 3
								},
								{
									"begin": 340,
									"end": 487,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 340,
									"end": 487,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 340,
									"end": 487,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 340,
									"end": 487,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 340,
									"end": 487,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 340,
									"end": 487,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 340,
									"end": 487,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 340,
									"end": 487,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 340,
									"end": 487,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 340,
									"end": 487,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 340,
									"end": 487,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 340,
									"end": 487,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 340,
									"end": 487,
									"name": "PUSHSIZE",
									"source": 3
								},
								{
									"begin": 340,
									"end": 487,
									"name": "CODESIZE",
									"source": 3
								},
								{
									"begin": 340,
									"end": 487,
									"name": "SUB",
									"source": 3
								},
								{
									"begin": 340,
									"end": 487,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 340,
									"end": 487,
									"name": "PUSHSIZE",
									"source": 3
								},
								{
									"begin": 340,
									"end": 487,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 340,
									"end": 487,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 340,
									"end": 487,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 340,
									"end": 487,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 340,
									"end": 487,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 340,
									"end": 487,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 340,
									"end": 487,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 340,
									"end": 487,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 340,
									"end": 487,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "2"
								},
								{
									"begin": 340,
									"end": 487,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 340,
									"end": 487,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "3"
								},
								{
									"begin": 340,
									"end": 487,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 340,
									"end": 487,
									"name": "tag",
									"source": 3,
									"value": "2"
								},
								{
									"begin": 340,
									"end": 487,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 388,
									"end": 413,
									"name": "PUSH",
									"source": 3,
									"value": "80"
								},
								{
									"begin": 388,
									"end": 413,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 441,
									"end": 456,
									"name": "TIMESTAMP",
									"source": 3
								},
								{
									"begin": 425,
									"end": 438,
									"name": "PUSH",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 425,
									"end": 456,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 477,
									"end": 478,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 478,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 467,
									"end": 478,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 173,
									"end": 989,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "7"
								},
								{
									"begin": 173,
									"end": 989,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 14,
									"end": 198,
									"name": "tag",
									"source": 4,
									"value": "3"
								},
								{
									"begin": 14,
									"end": 198,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 84,
									"end": 90,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 137,
									"end": 139,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 125,
									"end": 134,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 116,
									"end": 123,
									"name": "DUP5",
									"source": 4
								},
								{
									"begin": 112,
									"end": 135,
									"name": "SUB",
									"source": 4
								},
								{
									"begin": 108,
									"end": 140,
									"name": "SLT",
									"source": 4
								},
								{
									"begin": 105,
									"end": 157,
									"name": "ISZERO",
									"source": 4
								},
								{
									"begin": 105,
									"end": 157,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "9"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 153,
									"end": 154,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 150,
									"end": 151,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 143,
									"end": 155,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 105,
									"end": 157,
									"name": "tag",
									"source": 4,
									"value": "9"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 176,
									"end": 192,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 176,
									"end": 192,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 14,
									"end": 198,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 14,
									"end": 198,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 14,
									"end": 198,
									"name": "tag",
									"source": 4,
									"value": "7"
								},
								{
									"begin": 14,
									"end": 198,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 173,
									"end": 989,
									"name": "PUSH",
									"source": 3,
									"value": "80"
								},
								{
									"begin": 173,
									"end": 989,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 173,
									"end": 989,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 173,
									"end": 989,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 173,
									"end": 989,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 173,
									"end": 989,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 173,
									"end": 989,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 173,
									"end": 989,
									"name": "ASSIGNIMMUTABLE",
									"source": 3,
									"value": "77"
								},
								{
									"begin": 173,
									"end": 989,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 173,
									"end": 989,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 173,
									"end": 989,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220b2008c029273076c35ab03e283283efede07a375a59fe2b9c348113c8376396964736f6c63430008130033",
									".code": [
										{
											"begin": 173,
											"end": 989,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 173,
											"end": 989,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 173,
											"end": 989,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 173,
											"end": 989,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 173,
											"end": 989,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "tag",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 173,
											"end": 989,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 173,
											"end": 989,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 173,
											"end": 989,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "PUSH",
											"source": 3,
											"value": "100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 173,
											"end": 989,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 173,
											"end": 989,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "PUSH",
											"source": 3,
											"value": "3F3B3B27"
										},
										{
											"begin": 173,
											"end": 989,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 173,
											"end": 989,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "PUSH",
											"source": 3,
											"value": "4585E33B"
										},
										{
											"begin": 173,
											"end": 989,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 173,
											"end": 989,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "PUSH",
											"source": 3,
											"value": "61BC221A"
										},
										{
											"begin": 173,
											"end": 989,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 173,
											"end": 989,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "PUSH",
											"source": 3,
											"value": "6E04FF0D"
										},
										{
											"begin": 173,
											"end": 989,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 173,
											"end": 989,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "PUSH",
											"source": 3,
											"value": "947A36FB"
										},
										{
											"begin": 173,
											"end": 989,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 173,
											"end": 989,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "tag",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 173,
											"end": 989,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 173,
											"end": 989,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 173,
											"end": 989,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 305,
											"end": 333,
											"name": "tag",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 305,
											"end": 333,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 305,
											"end": 333,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 305,
											"end": 333,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 305,
											"end": 333,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 305,
											"end": 333,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 305,
											"end": 333,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 305,
											"end": 333,
											"name": "tag",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 305,
											"end": 333,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 305,
											"end": 333,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 305,
											"end": 333,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 160,
											"end": 185,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 160,
											"end": 185,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 160,
											"end": 185,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 148,
											"end": 150,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 133,
											"end": 151,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 305,
											"end": 333,
											"name": "tag",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 305,
											"end": 333,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 305,
											"end": 333,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 305,
											"end": 333,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 305,
											"end": 333,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 305,
											"end": 333,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 305,
											"end": 333,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 305,
											"end": 333,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 305,
											"end": 333,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 761,
											"end": 985,
											"name": "tag",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 761,
											"end": 985,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 761,
											"end": 985,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 761,
											"end": 985,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 761,
											"end": 985,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 761,
											"end": 985,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 761,
											"end": 985,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 761,
											"end": 985,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 761,
											"end": 985,
											"name": "tag",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 761,
											"end": 985,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 761,
											"end": 985,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 761,
											"end": 985,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 761,
											"end": 985,
											"name": "tag",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 761,
											"end": 985,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 761,
											"end": 985,
											"name": "STOP",
											"source": 3
										},
										{
											"begin": 234,
											"end": 256,
											"name": "tag",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 234,
											"end": 256,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 234,
											"end": 256,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 234,
											"end": 256,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 234,
											"end": 256,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 234,
											"end": 256,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 234,
											"end": 256,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 493,
											"end": 755,
											"name": "tag",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 493,
											"end": 755,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 493,
											"end": 755,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 493,
											"end": 755,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 493,
											"end": 755,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 493,
											"end": 755,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 493,
											"end": 755,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 493,
											"end": 755,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 493,
											"end": 755,
											"name": "tag",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 493,
											"end": 755,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 493,
											"end": 755,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 493,
											"end": 755,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 493,
											"end": 755,
											"name": "tag",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 493,
											"end": 755,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 493,
											"end": 755,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 493,
											"end": 755,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 493,
											"end": 755,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 493,
											"end": 755,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 493,
											"end": 755,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 493,
											"end": 755,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 493,
											"end": 755,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 493,
											"end": 755,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 264,
											"end": 297,
											"name": "tag",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 264,
											"end": 297,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 264,
											"end": 297,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 264,
											"end": 297,
											"name": "PUSHIMMUTABLE",
											"source": 3,
											"value": "77"
										},
										{
											"begin": 264,
											"end": 297,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 264,
											"end": 297,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 761,
											"end": 985,
											"name": "tag",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 761,
											"end": 985,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 870,
											"end": 878,
											"name": "PUSHIMMUTABLE",
											"source": 3,
											"value": "77"
										},
										{
											"begin": 853,
											"end": 866,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 853,
											"end": 866,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 835,
											"end": 850,
											"name": "TIMESTAMP",
											"source": 3
										},
										{
											"begin": 835,
											"end": 866,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 835,
											"end": 866,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 835,
											"end": 866,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 835,
											"end": 866,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "29"
										},
										{
											"begin": 835,
											"end": 866,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 835,
											"end": 866,
											"name": "tag",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 835,
											"end": 866,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 834,
											"end": 878,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 830,
											"end": 977,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 830,
											"end": 977,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "30"
										},
										{
											"begin": 830,
											"end": 977,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 912,
											"end": 927,
											"name": "TIMESTAMP",
											"source": 3
										},
										{
											"begin": 896,
											"end": 909,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 896,
											"end": 927,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 896,
											"end": 927,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 896,
											"end": 927,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 953,
											"end": 960,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 953,
											"end": 960,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 953,
											"end": 964,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "31"
										},
										{
											"begin": 953,
											"end": 964,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 953,
											"end": 964,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 953,
											"end": 964,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 953,
											"end": 964,
											"name": "tag",
											"source": 3,
											"value": "31"
										},
										{
											"begin": 953,
											"end": 964,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 943,
											"end": 950,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 943,
											"end": 964,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 830,
											"end": 977,
											"name": "tag",
											"source": 3,
											"value": "30"
										},
										{
											"begin": 830,
											"end": 977,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 761,
											"end": 985,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 761,
											"end": 985,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 761,
											"end": 985,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 493,
											"end": 755,
											"name": "tag",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 493,
											"end": 755,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 636,
											"end": 653,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 655,
											"end": 667,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 738,
											"end": 746,
											"name": "PUSHIMMUTABLE",
											"source": 3,
											"value": "77"
										},
										{
											"begin": 721,
											"end": 734,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 721,
											"end": 734,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 703,
											"end": 718,
											"name": "TIMESTAMP",
											"source": 3
										},
										{
											"begin": 703,
											"end": 734,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 703,
											"end": 734,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 703,
											"end": 734,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 703,
											"end": 734,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "29"
										},
										{
											"begin": 703,
											"end": 734,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 703,
											"end": 734,
											"name": "tag",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 703,
											"end": 734,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 702,
											"end": 746,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 687,
											"end": 746,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 687,
											"end": 746,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 493,
											"end": 755,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 493,
											"end": 755,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 493,
											"end": 755,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 493,
											"end": 755,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 493,
											"end": 755,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 493,
											"end": 755,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 196,
											"end": 787,
											"name": "tag",
											"source": 4,
											"value": "14"
										},
										{
											"begin": 196,
											"end": 787,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 266,
											"end": 272,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 274,
											"end": 280,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 327,
											"end": 329,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 315,
											"end": 324,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 306,
											"end": 313,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 302,
											"end": 325,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 298,
											"end": 330,
											"name": "SLT",
											"source": 4
										},
										{
											"begin": 295,
											"end": 347,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 295,
											"end": 347,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 295,
											"end": 347,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 343,
											"end": 344,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 340,
											"end": 341,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 333,
											"end": 345,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 295,
											"end": 347,
											"name": "tag",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 295,
											"end": 347,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 383,
											"end": 392,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 370,
											"end": 393,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 412,
											"end": 430,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 453,
											"end": 455,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 445,
											"end": 451,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 442,
											"end": 456,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 439,
											"end": 473,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 439,
											"end": 473,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 439,
											"end": 473,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 469,
											"end": 470,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 466,
											"end": 467,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 459,
											"end": 471,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 439,
											"end": 473,
											"name": "tag",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 439,
											"end": 473,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 507,
											"end": 513,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 496,
											"end": 505,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 492,
											"end": 514,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 482,
											"end": 514,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 482,
											"end": 514,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 552,
											"end": 559,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 545,
											"end": 549,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 541,
											"end": 543,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 537,
											"end": 550,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 533,
											"end": 560,
											"name": "SLT",
											"source": 4
										},
										{
											"begin": 523,
											"end": 578,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "41"
										},
										{
											"begin": 523,
											"end": 578,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 574,
											"end": 575,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 571,
											"end": 572,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 564,
											"end": 576,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 523,
											"end": 578,
											"name": "tag",
											"source": 4,
											"value": "41"
										},
										{
											"begin": 523,
											"end": 578,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 614,
											"end": 616,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 601,
											"end": 617,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 640,
											"end": 642,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 632,
											"end": 638,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 629,
											"end": 643,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 626,
											"end": 660,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 626,
											"end": 660,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "42"
										},
										{
											"begin": 626,
											"end": 660,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 656,
											"end": 657,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 653,
											"end": 654,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 646,
											"end": 658,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 626,
											"end": 660,
											"name": "tag",
											"source": 4,
											"value": "42"
										},
										{
											"begin": 626,
											"end": 660,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 701,
											"end": 708,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 696,
											"end": 698,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 687,
											"end": 693,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 683,
											"end": 685,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 679,
											"end": 694,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 675,
											"end": 699,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 672,
											"end": 709,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 669,
											"end": 726,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 669,
											"end": 726,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "43"
										},
										{
											"begin": 669,
											"end": 726,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 722,
											"end": 723,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 720,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 712,
											"end": 724,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 669,
											"end": 726,
											"name": "tag",
											"source": 4,
											"value": "43"
										},
										{
											"begin": 669,
											"end": 726,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 753,
											"end": 755,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 745,
											"end": 756,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 745,
											"end": 756,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 745,
											"end": 756,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 745,
											"end": 756,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 745,
											"end": 756,
											"name": "SWAP7",
											"source": 4
										},
										{
											"begin": 775,
											"end": 781,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 775,
											"end": 781,
											"name": "SWAP6",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 196,
											"end": 787,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 196,
											"end": 787,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 196,
											"end": 787,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 792,
											"end": 1419,
											"name": "tag",
											"source": 4,
											"value": "23"
										},
										{
											"begin": 792,
											"end": 1419,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 975,
											"end": 981,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 968,
											"end": 982,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 961,
											"end": 983,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 950,
											"end": 959,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 943,
											"end": 984,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 924,
											"end": 928,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1003,
											"end": 1005,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1041,
											"end": 1043,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1036,
											"end": 1038,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1025,
											"end": 1034,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1021,
											"end": 1039,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1014,
											"end": 1044,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1073,
											"end": 1079,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1067,
											"end": 1080,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1116,
											"end": 1122,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1111,
											"end": 1113,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1100,
											"end": 1109,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1096,
											"end": 1114,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1089,
											"end": 1123,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1141,
											"end": 1142,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1151,
											"end": 1291,
											"name": "tag",
											"source": 4,
											"value": "45"
										},
										{
											"begin": 1151,
											"end": 1291,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1165,
											"end": 1171,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1162,
											"end": 1163,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1159,
											"end": 1172,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 1151,
											"end": 1291,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1151,
											"end": 1291,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "47"
										},
										{
											"begin": 1151,
											"end": 1291,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1260,
											"end": 1274,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1260,
											"end": 1274,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1260,
											"end": 1274,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1256,
											"end": 1279,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1256,
											"end": 1279,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1250,
											"end": 1280,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1226,
											"end": 1243,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1226,
											"end": 1243,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1226,
											"end": 1243,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1245,
											"end": 1247,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 1222,
											"end": 1248,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1215,
											"end": 1281,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1180,
											"end": 1190,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1180,
											"end": 1190,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1151,
											"end": 1291,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "45"
										},
										{
											"begin": 1151,
											"end": 1291,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1151,
											"end": 1291,
											"name": "tag",
											"source": 4,
											"value": "47"
										},
										{
											"begin": 1151,
											"end": 1291,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1155,
											"end": 1158,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1340,
											"end": 1341,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1335,
											"end": 1337,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 1326,
											"end": 1332,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1315,
											"end": 1324,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 1311,
											"end": 1333,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1307,
											"end": 1338,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1300,
											"end": 1342,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1410,
											"end": 1412,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 1403,
											"end": 1405,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 1399,
											"end": 1406,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 1394,
											"end": 1396,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 1386,
											"end": 1392,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1382,
											"end": 1397,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1378,
											"end": 1407,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1367,
											"end": 1376,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1363,
											"end": 1408,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1359,
											"end": 1413,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1351,
											"end": 1413,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 1351,
											"end": 1413,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1351,
											"end": 1413,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1351,
											"end": 1413,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 792,
											"end": 1419,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 792,
											"end": 1419,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 792,
											"end": 1419,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 792,
											"end": 1419,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 792,
											"end": 1419,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 792,
											"end": 1419,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1424,
											"end": 1608,
											"name": "tag",
											"source": 4,
											"value": "35"
										},
										{
											"begin": 1424,
											"end": 1608,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1476,
											"end": 1553,
											"name": "PUSH",
											"source": 4,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1473,
											"end": 1474,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1466,
											"end": 1554,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1573,
											"end": 1577,
											"name": "PUSH",
											"source": 4,
											"value": "11"
										},
										{
											"begin": 1570,
											"end": 1571,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1563,
											"end": 1578,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1597,
											"end": 1601,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 1594,
											"end": 1595,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1587,
											"end": 1602,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 1613,
											"end": 1741,
											"name": "tag",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 1613,
											"end": 1741,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1680,
											"end": 1689,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1680,
											"end": 1689,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1680,
											"end": 1689,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1701,
											"end": 1712,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1701,
											"end": 1712,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1701,
											"end": 1712,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 1698,
											"end": 1735,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1698,
											"end": 1735,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "51"
										},
										{
											"begin": 1698,
											"end": 1735,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1715,
											"end": 1733,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "51"
										},
										{
											"begin": 1715,
											"end": 1733,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "35"
										},
										{
											"begin": 1715,
											"end": 1733,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1715,
											"end": 1733,
											"name": "tag",
											"source": 4,
											"value": "51"
										},
										{
											"begin": 1715,
											"end": 1733,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1613,
											"end": 1741,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 1613,
											"end": 1741,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1613,
											"end": 1741,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1613,
											"end": 1741,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1613,
											"end": 1741,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1746,
											"end": 1871,
											"name": "tag",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 1746,
											"end": 1871,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1811,
											"end": 1820,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1811,
											"end": 1820,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1811,
											"end": 1820,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1832,
											"end": 1842,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1832,
											"end": 1842,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1832,
											"end": 1842,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 1829,
											"end": 1865,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1829,
											"end": 1865,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "51"
										},
										{
											"begin": 1829,
											"end": 1865,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1845,
											"end": 1863,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "51"
										},
										{
											"begin": 1845,
											"end": 1863,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "35"
										},
										{
											"begin": 1845,
											"end": 1863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										}
									]
								}
							},
							"sourceList": [
								"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol",
								"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol",
								"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol",
								"CustomLogic.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"checkUpkeep(bytes)": "6e04ff0d",
							"counter()": "61bc221a",
							"interval()": "947a36fb",
							"lastTimeStamp()": "3f3b3b27",
							"performUpkeep(bytes)": "4585e33b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"updateInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"CustomLogic.sol\":\"CustomLogic\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"keccak256\":\"0x8c97744adc25cf30d1a2509bff6c0ddc9b36feb75f8e38c85d5c62b8ec773159\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c53c8736dacbf8c517c63937d556c3e4873a62f509c5d84b89e32fc5c9c6c2c\",\"dweb:/ipfs/QmeR6RSce5dTDcPgbwBnG7E8U89716bqsUcv1NeWnX5RJf\"]},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"keccak256\":\"0xce623f3e7fa4addf240032d2817b2b489ac08e79fae14a5cc5850ed3f1acddf8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0546b2739f3989b897c5cb591d01211e2db22e1a8578f68117f1a8a692abd85c\",\"dweb:/ipfs/QmW6guw8uUk2Dq49PWdjeZeEvnDDRg3CVX2BVcVNcT6QNL\"]},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"keccak256\":\"0xf504b227c442cd4ed31b336b7bd15cfcb23220c84c26e750975c7e7d959125aa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://34e35eb46dfadf12396e92dd970547209dfd99f0ae5b1ec7b5a3e81617f620a1\",\"dweb:/ipfs/Qmanoi2CDi9MwkP44HosagvewfMEvCMN1YthGRmCexVjwY\"]},\"CustomLogic.sol\":{\"keccak256\":\"0xa71273c9129bcad91013dd3508d34d494f03052a7b1a34f043cc4758867eebce\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f403bd5414f84913d1a6f6e66ab9980c0be94cd9e35e987bffa0956af6b6f6ea\",\"dweb:/ipfs/QmeHD9gHeXG29etErhpFotSQAVg2fDmvZP2P5g1DT35JDp\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 75,
								"contract": "CustomLogic.sol:CustomLogic",
								"label": "counter",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 79,
								"contract": "CustomLogic.sol:CustomLogic",
								"label": "lastTimeStamp",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "6321",
				"formattedMessage": "Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n  --> CustomLogic.sol:25:37:\n   |\n25 |         returns (bool upkeepNeeded, bytes memory)  \n   |                                     ^^^^^^^^^^^^\n\n",
				"message": "Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 667,
					"file": "CustomLogic.sol",
					"start": 655
				},
				"type": "Warning"
			}
		],
		"sources": {
			"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol": {
				"ast": {
					"absolutePath": "@chainlink/contracts/src/v0.8/automation/AutomationBase.sol",
					"exportedSymbols": {
						"AutomationBase": [
							37
						]
					},
					"id": 38,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "AutomationBase",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 37,
							"linearizedBaseContracts": [
								37
							],
							"name": "AutomationBase",
							"nameLocation": "66:14:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "b60ac5db",
									"id": 3,
									"name": "OnlySimulatedBackend",
									"nameLocation": "91:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "111:2:0"
									},
									"src": "85:29:0"
								},
								{
									"body": {
										"id": 27,
										"nodeType": "Block",
										"src": "291:200:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 21,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 13,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 7,
																"name": "tx",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967270,
																"src": "350:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_transaction",
																	"typeString": "tx"
																}
															},
															"id": 8,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "353:6:0",
															"memberName": "origin",
															"nodeType": "MemberAccess",
															"src": "350:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 11,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "371:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 10,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "363:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 9,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "363:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 12,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "363:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "350:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 20,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 14,
																"name": "tx",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967270,
																"src": "377:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_transaction",
																	"typeString": "tx"
																}
															},
															"id": 15,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "380:6:0",
															"memberName": "origin",
															"nodeType": "MemberAccess",
															"src": "377:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"arguments": [
																{
																	"hexValue": "307831313131313131313131313131313131313131313131313131313131313131313131313131313131",
																	"id": 18,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "398:42:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"value": "0x1111111111111111111111111111111111111111"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 17,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "390:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 16,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "390:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "390:51:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "377:64:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "350:91:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 26,
												"nodeType": "IfStatement",
												"src": "346:141:0",
												"trueBody": {
													"id": 25,
													"nodeType": "Block",
													"src": "443:44:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 22,
																	"name": "OnlySimulatedBackend",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3,
																	"src": "458:20:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 23,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "458:22:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 24,
															"nodeType": "RevertStatement",
															"src": "451:29:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 4,
										"nodeType": "StructuredDocumentation",
										"src": "118:127:0",
										"text": " @notice method that allows it to be simulated via eth_call by checking that\n the sender is the zero address."
									},
									"id": 28,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_preventExecution",
									"nameLocation": "257:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 5,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "274:2:0"
									},
									"returnParameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "291:0:0"
									},
									"scope": 37,
									"src": "248:243:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 35,
										"nodeType": "Block",
										"src": "652:37:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 31,
														"name": "_preventExecution",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 28,
														"src": "658:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 32,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "658:19:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 33,
												"nodeType": "ExpressionStatement",
												"src": "658:19:0"
											},
											{
												"id": 34,
												"nodeType": "PlaceholderStatement",
												"src": "683:1:0"
											}
										]
									},
									"documentation": {
										"id": 29,
										"nodeType": "StructuredDocumentation",
										"src": "495:129:0",
										"text": " @notice modifier that allows it to be simulated via eth_call by checking\n that the sender is the zero address."
									},
									"id": 36,
									"name": "cannotExecute",
									"nameLocation": "636:13:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "649:2:0"
									},
									"src": "627:62:0",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 38,
							"src": "57:634:0",
							"usedErrors": [
								3
							]
						}
					],
					"src": "32:660:0"
				},
				"id": 0
			},
			"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol": {
				"ast": {
					"absolutePath": "@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol",
					"exportedSymbols": {
						"AutomationBase": [
							37
						],
						"AutomationCompatible": [
							48
						],
						"AutomationCompatibleInterface": [
							67
						]
					},
					"id": 49,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 39,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:1"
						},
						{
							"absolutePath": "@chainlink/contracts/src/v0.8/automation/AutomationBase.sol",
							"file": "./AutomationBase.sol",
							"id": 41,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 49,
							"sourceUnit": 38,
							"src": "57:52:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 40,
										"name": "AutomationBase",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 37,
										"src": "65:14:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol",
							"file": "./interfaces/AutomationCompatibleInterface.sol",
							"id": 43,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 49,
							"sourceUnit": 68,
							"src": "110:93:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 42,
										"name": "AutomationCompatibleInterface",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 67,
										"src": "118:29:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 44,
										"name": "AutomationBase",
										"nameLocations": [
											"247:14:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 37,
										"src": "247:14:1"
									},
									"id": 45,
									"nodeType": "InheritanceSpecifier",
									"src": "247:14:1"
								},
								{
									"baseName": {
										"id": 46,
										"name": "AutomationCompatibleInterface",
										"nameLocations": [
											"263:29:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 67,
										"src": "263:29:1"
									},
									"id": 47,
									"nodeType": "InheritanceSpecifier",
									"src": "263:29:1"
								}
							],
							"canonicalName": "AutomationCompatible",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": false,
							"id": 48,
							"linearizedBaseContracts": [
								48,
								67,
								37
							],
							"name": "AutomationCompatible",
							"nameLocation": "223:20:1",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 49,
							"src": "205:90:1",
							"usedErrors": [
								3
							]
						}
					],
					"src": "32:264:1"
				},
				"id": 1
			},
			"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol": {
				"ast": {
					"absolutePath": "@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol",
					"exportedSymbols": {
						"AutomationCompatibleInterface": [
							67
						]
					},
					"id": 68,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 50,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "AutomationCompatibleInterface",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 67,
							"linearizedBaseContracts": [
								67
							],
							"name": "AutomationCompatibleInterface",
							"nameLocation": "120:29:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 51,
										"nodeType": "StructuredDocumentation",
										"src": "154:985:2",
										"text": " @notice method that is simulated by the keepers to see if any work actually\n needs to be performed. This method does does not actually need to be\n executable, and since it is only ever simulated it can consume lots of gas.\n @dev To ensure that it is never called, you may want to add the\n cannotExecute modifier from KeeperBase to your implementation of this\n method.\n @param checkData specified in the upkeep registration so it is always the\n same for a registered upkeep. This can easily be broken down into specific\n arguments using `abi.decode`, so multiple upkeeps can be registered on the\n same contract and easily differentiated by the contract.\n @return upkeepNeeded boolean to indicate whether the keeper should call\n performUpkeep or not.\n @return performData bytes that the keeper should call performUpkeep with, if\n upkeep is needed. If you would like to encode data to decode later, try\n `abi.encode`."
									},
									"functionSelector": "6e04ff0d",
									"id": 60,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "checkUpkeep",
									"nameLocation": "1151:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 54,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "checkData",
												"nameLocation": "1178:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1163:24:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 52,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1163:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1162:26:2"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 56,
												"mutability": "mutable",
												"name": "upkeepNeeded",
												"nameLocation": "1212:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1207:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 55,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1207:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 58,
												"mutability": "mutable",
												"name": "performData",
												"nameLocation": "1239:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1226:24:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 57,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1226:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1206:45:2"
									},
									"scope": 67,
									"src": "1142:110:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "1256:1003:2",
										"text": " @notice method that is actually executed by the keepers, via the registry.\n The data returned by the checkUpkeep simulation will be passed into\n this method to actually be executed.\n @dev The input to this method should not be trusted, and the caller of the\n method should not even be restricted to any single registry. Anyone should\n be able call it, and the input should be validated, there is no guarantee\n that the data passed in is the performData returned from checkUpkeep. This\n could happen due to malicious keepers, racing keepers, or simply a state\n change while the performUpkeep transaction is waiting for confirmation.\n Always validate the data passed in.\n @param performData is the data which was passed back from the checkData\n simulation. If it is encoded, it can easily be decoded into other types by\n calling `abi.decode`. This data should not be trusted, and should be\n validated against the contract's current state."
									},
									"functionSelector": "4585e33b",
									"id": 66,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "performUpkeep",
									"nameLocation": "2271:13:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "performData",
												"nameLocation": "2300:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 66,
												"src": "2285:26:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 62,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2285:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2284:28:2"
									},
									"returnParameters": {
										"id": 65,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2321:0:2"
									},
									"scope": 67,
									"src": "2262:60:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 68,
							"src": "110:2214:2",
							"usedErrors": []
						}
					],
					"src": "32:2293:2"
				},
				"id": 2
			},
			"CustomLogic.sol": {
				"ast": {
					"absolutePath": "CustomLogic.sol",
					"exportedSymbols": {
						"AutomationCompatibleInterface": [
							67
						],
						"CustomLogic": [
							147
						]
					},
					"id": 148,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 69,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "34:23:3"
						},
						{
							"absolutePath": "@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol",
							"file": "@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol",
							"id": 71,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 148,
							"sourceUnit": 49,
							"src": "59:112:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 70,
										"name": "AutomationCompatibleInterface",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 67,
										"src": "67:29:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 72,
										"name": "AutomationCompatibleInterface",
										"nameLocations": [
											"197:29:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 67,
										"src": "197:29:3"
									},
									"id": 73,
									"nodeType": "InheritanceSpecifier",
									"src": "197:29:3"
								}
							],
							"canonicalName": "CustomLogic",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 147,
							"linearizedBaseContracts": [
								147,
								67
							],
							"name": "CustomLogic",
							"nameLocation": "182:11:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "61bc221a",
									"id": 75,
									"mutability": "mutable",
									"name": "counter",
									"nameLocation": "249:7:3",
									"nodeType": "VariableDeclaration",
									"scope": 147,
									"src": "234:22:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 74,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "234:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "947a36fb",
									"id": 77,
									"mutability": "immutable",
									"name": "interval",
									"nameLocation": "289:8:3",
									"nodeType": "VariableDeclaration",
									"scope": 147,
									"src": "264:33:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 76,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "264:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "3f3b3b27",
									"id": 79,
									"mutability": "mutable",
									"name": "lastTimeStamp",
									"nameLocation": "320:13:3",
									"nodeType": "VariableDeclaration",
									"scope": 147,
									"src": "305:28:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 78,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "305:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 97,
										"nodeType": "Block",
										"src": "376:111:3",
										"statements": [
											{
												"expression": {
													"id": 86,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 84,
														"name": "interval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 77,
														"src": "388:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 85,
														"name": "updateInterval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 81,
														"src": "399:14:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "388:25:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 87,
												"nodeType": "ExpressionStatement",
												"src": "388:25:3"
											},
											{
												"expression": {
													"id": 91,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 88,
														"name": "lastTimeStamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 79,
														"src": "425:13:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 89,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "441:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 90,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "447:9:3",
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "441:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "425:31:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 92,
												"nodeType": "ExpressionStatement",
												"src": "425:31:3"
											},
											{
												"expression": {
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 93,
														"name": "counter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 75,
														"src": "467:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 94,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "477:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "467:11:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "467:11:3"
											}
										]
									},
									"id": 98,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 82,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 81,
												"mutability": "mutable",
												"name": "updateInterval",
												"nameLocation": "360:14:3",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "352:22:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 80,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "352:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "351:24:3"
									},
									"returnParameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "376:0:3"
									},
									"scope": 147,
									"src": "340:147:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										60
									],
									"body": {
										"id": 118,
										"nodeType": "Block",
										"src": "675:80:3",
										"statements": [
											{
												"expression": {
													"id": 116,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 108,
														"name": "upkeepNeeded",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 104,
														"src": "687:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 115,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 112,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 109,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "703:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 110,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "709:9:3",
																		"memberName": "timestamp",
																		"nodeType": "MemberAccess",
																		"src": "703:15:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 111,
																		"name": "lastTimeStamp",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 79,
																		"src": "721:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "703:31:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 113,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "702:33:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 114,
															"name": "interval",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 77,
															"src": "738:8:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "702:44:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "687:59:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 117,
												"nodeType": "ExpressionStatement",
												"src": "687:59:3"
											}
										]
									},
									"functionSelector": "6e04ff0d",
									"id": 119,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "checkUpkeep",
									"nameLocation": "502:11:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 102,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "608:8:3"
									},
									"parameters": {
										"id": 101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 100,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "525:14:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 99,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "525:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "513:50:3"
									},
									"returnParameters": {
										"id": 107,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"mutability": "mutable",
												"name": "upkeepNeeded",
												"nameLocation": "641:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "636:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 103,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "636:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 106,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "655:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 105,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "655:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "635:33:3"
									},
									"scope": 147,
									"src": "493:262:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										66
									],
									"body": {
										"id": 145,
										"nodeType": "Block",
										"src": "818:167:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 131,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 128,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 125,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "835:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 126,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "841:9:3",
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "835:15:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 127,
																	"name": "lastTimeStamp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 79,
																	"src": "853:13:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "835:31:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 129,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "834:33:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 130,
														"name": "interval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 77,
														"src": "870:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "834:44:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 144,
												"nodeType": "IfStatement",
												"src": "830:147:3",
												"trueBody": {
													"id": 143,
													"nodeType": "Block",
													"src": "880:97:3",
													"statements": [
														{
															"expression": {
																"id": 135,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 132,
																	"name": "lastTimeStamp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 79,
																	"src": "896:13:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 133,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "912:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 134,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "918:9:3",
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "912:15:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "896:31:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 136,
															"nodeType": "ExpressionStatement",
															"src": "896:31:3"
														},
														{
															"expression": {
																"id": 141,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 137,
																	"name": "counter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 75,
																	"src": "943:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 140,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 138,
																		"name": "counter",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 75,
																		"src": "953:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 139,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "963:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "953:11:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "943:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 142,
															"nodeType": "ExpressionStatement",
															"src": "943:21:3"
														}
													]
												}
											}
										]
									},
									"functionSelector": "4585e33b",
									"id": 146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "performUpkeep",
									"nameLocation": "770:13:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 123,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "809:8:3"
									},
									"parameters": {
										"id": 122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 121,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "784:14:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 120,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "784:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "783:16:3"
									},
									"returnParameters": {
										"id": 124,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "818:0:3"
									},
									"scope": 147,
									"src": "761:224:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 148,
							"src": "173:816:3",
							"usedErrors": []
						}
					],
					"src": "34:955:3"
				},
				"id": 3
			}
		}
	}
}